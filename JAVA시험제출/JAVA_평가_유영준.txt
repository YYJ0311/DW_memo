1.메소드 리턴,이름,파라미터 타입 작성.
    public int getCount(List<Object> list){
        return 0;
    }
    //리턴 타입 : int
    //메소드 이름: getCount
    //파라미터 타입 : List<Object>

2. 메소드 리턴,이름,파라미터 타입 작성.
    public void insertData(Map<String, Object> map){

    }
    //리턴 타입 : void
    //메소드 이름: insertData
    //파라미터 타입 : Map<String, Object>

3. 메소드 리턴,이름,파라미터 타입 작성.
     public List<Object> list insertData(String str){
        return null;
    }
    //리턴 타입 : List<Object>
    //메소드 이름: insertData
    //파라미터 타입 : String

** 4. 오버라이딩과 오버로딩
    ** 오버라이딩 ("재정의"가 포인트)
        인터페이스의 클래스를 불러와서 쓸 때 오버라이딩을 한다
        (메소드 이름 동일, 파라미터 개수와 값도 동일)
        => 자식 클래스에서 부모 클래스에 있는 메소드를 동일한 이름의 메소드로 *재정의하는 것!

    오버로딩 
        같은 클래스 안 또는 상속 관계에서 같은 이름의 메소드를 중복하여 사용하기 위해 사용한다.
        (메소드 이름 동일, 파라미터 개수와 값은 다르게 지정)

** 5. 추상 클래스와 인터페이스 차이 ("강제성 유무"가 포인트)
둘 다 공통된 기능을 자식클래스에 상속시키기 위해 만든 것으로
추상 클래스만으로는 다중상속이 불가능하고 인터페이스에서 사용하는 추상 클래스는 다중상속이 가능하다
    => 인터페이스는 오버라이딩이 필수(강제)지만 추상클래스는 아니다.
    추상 클래스는 abstract로 선언되며, 일반메소드와 추상메소드를 정의할 수 있다. 하지만 인스턴스화(new로 호출)가 불가능하고 다중상속이 불가능하다.
    또 추상 클래스는 로직구현이 목적이 아니라서 중괄호가 없다. 추상 클래스로 정의한 메소드들을 오버라이딩하는 건 강제가 아니다.

    인터페이스는 implements로 사용하며 다중상속이 가능하다. 인터페이스를 상속받으면 메소드의 오버라이딩이 필수(강제적)이다.
    인터페이스 안에 있는 메소드는 모두 추상 메소드이고 public이다(private은 가져다 쓸 수 없기 때문)

6. 상속
여러 클래스가 있을 때, 클래스들이 공통된 기능을 가질 경우 각각의 클래스(자식 클래스, 서브 클래스)에서 그 기능을 정의하지 않고, 공통된 기능을 관리하는 클래스(부모 클래스, 슈퍼 클래스)를 만들어서 정의한다.
그리고 부모클래스를 자식 클래스에 상속시키면 부모클래스에 있는 공통된 기능을 가져와서 사용할 수 있다.

** 7. 생성자 ("초기화"가 포인트)
다른 클래스의 메소드를 사용하고 싶을 때, 생성자 new()로 해당 클래스를 호출하고 그 클래스 안의 메소드를 사용한다.
그 클래스의 변수들은 초기화된다.
    => 생성자는 return이 없는 함수이다. 생성자의 이름은 클래스 이름과 동일해야 한다. 보통의 클래스에는 기본 생성자가 존재한다.
    또 생성자는 필드변수를 초기화하고 값을 대입하기 위해서 사용한다.

8. 컬렉션
공통된 데이터타입을 갖는 것들의 집합인 배열은 길이가 처음에 정해져 있다. 하지만 컬렉션은 배열에 값을 집어 넣으면서 길이를 계속 늘려가며 사용할 수 있다.

** 9. 아래 코드를 보고 예상되는 결과는?
    class A{

        public static int count;
        public int temp;

    }
    class B{

        main(){

            A a1 = new A();
            a1.count = 10;
            a1.temp = 20;

            A a2 = new A();
            a2.count = 20;
            a2.temp = 20;

            System.out.println(a1.count); // 답 : 10 => 20
                위에 정의된 count가 static이기 때문에 a1까지만 봤을 땐 count가 10이지만 a2에서 20으로 바뀌기 때문에 그 아래에서 출력하는 count는 결국 20이다.
                a1과 a2 모두 count를 20으로 공유함.
            System.out.println(a1.temp); // 답 : 20

            System.out.println(a2.count); // 답 : 20
            System.out.println(a2.temp); // 답 : 20
        }
    }

10. 아래 코드를 보고 예상되는 결과는?
    class A{
        public int money;
    }
    class B{
        public A getInstance(){
            return a;
        }
    }
    class C{
        main(){
            B b = new B();
            A a = b.getInstance();
            a.money = 1000;
            a = b.getInstance();
            a.money = a.money + 1000;
            System.out.println(a.money); // 답 : 1000
            // a.money가 1000으로 선언되었으나
            // a = b.getInstance(); 에서 a가 new A()로 다시 초기화 되서.
        }
    }

** 11. getter, setter을 이용하지 않고 필드변수 값을 초기화 하는 방법을 아래 코드로 작성하시오.
class A{
    private String name;
    private int age;

    초기화를 위해서 메소드를 만들고 this를 이용해서 변수 name과 age를 초기화 한다.
    public A(String name, int age){
    this.name = name;
    this.age = age;
    }
}